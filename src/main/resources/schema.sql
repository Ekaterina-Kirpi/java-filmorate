
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS friendship CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS genre CASCADE;
DROP TABLE IF EXISTS rating_mpa CASCADE;
DROP TABLE IF EXISTS film_genre CASCADE;

CREATE TABLE IF NOT EXISTS rating_mpa (
  rating_id INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(32) NOT NULL
);

CREATE TABLE IF NOT EXISTS genre (
  id INTEGER PRIMARY KEY,
  name VARCHAR(32) UNIQUE NOT NULL
);


CREATE TABLE IF NOT EXISTS films (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(64) NOT NULL,
  description VARCHAR(200),
  duration INTEGER NOT NULL,
  release_date DATE NOT NULL,
  rating_id INTEGER REFERENCES rating_mpa(rating_id),
    CHECK(duration > 0)
);

CREATE TABLE IF NOT EXISTS users (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(64) NOT NULL,
  login VARCHAR(64) NOT NULL,
  email VARCHAR(64) NOT NULL,
  birthday DATE
  CHECK(birthday <= CAST(now() AS DATE))

);

CREATE TABLE IF NOT EXISTS friendship (
  user_id INTEGER REFERENCES users(id) NOT NULL,
  friend_id INTEGER REFERENCES users(id) NOT NULL,
UNIQUE(user_id, friend_id)
);



CREATE TABLE IF NOT EXISTS film_genre (
  film_id INTEGER REFERENCES films(id) NOT NULL,
  genre_id INTEGER REFERENCES genre(id) NOT NULL,
  UNIQUE(film_id, genre_id)
);


CREATE TABLE IF NOT EXISTS likes (
  film_id INTEGER REFERENCES films(id) NOT NULL,
  user_id INTEGER REFERENCES users(id) NOT NULL,
  UNIQUE(film_id, user_id)
);


